%
% VM.mcrl2
%
% A Simple Vending Machine.
%
% Copyright (c) 2019-2019 HS Emden-Leer
% All Rights Reserved.
%
% @version 1.00 - 01 Apr 2019 - GJV - initial version
%

% -----------------------------------------------------------------------------------------------------------------------
%
% Definition der coins
%
sort
	Coin = struct _5c | _10c | _20c | _50c | Euro;

map
	value: Coin  -> Int;	% Der Wert des coin als integer deklariert
	
	% Initialisierung die Werte der deklarierten Coinstypen

eqn
	value(_5c) = 5;
	value(_10c) = 10;
	value(_20c) = 20;
	value(_50c) = 50;
	value(Euro) = 100;

% -----------------------------------------------------------------------------------------------------------------------
%
% Definition der Produkte
%
sort
	Product = struct tea | coffee | cake | apple;

map
	price: Product  -> Int;	% the price of a product as an integer
	
	% Initialisierung die Werte der deklarierten Produkttypen

eqn
	price(tea) = 10;
	price(coffee) = 25;
	price(cake) = 60;
	price(apple) = 80;

% -----------------------------------------------------------------------------------------------------------------------
%
% Definition der Aktionen
%
act
	accept: Coin;      % accept a coin inserted into the machine	
	return: Coin;  	% returns change
	offer: Product;      % offer the possibility to order a certain product
	serve: Product;      % serve a certain product
	returnChange: Int;	% request to return the current credit as  change

% Definition der Prozesse
%Muss Credit kleier als 200,um neue Coints zu akzeptieren
%Das Credit beginnt mit 0 Wert
%Credit soll gleich oder größer als Produktpreis sein
%Produktpreis wird von Credit abgezogen

proc
	VendingMachine = VM(0);	

	VM(credit : Int) = 
		sum coin:Coin.(credit<200)->accept(coin).VM(credit+value(coin)) +
		(credit>0)->returnChange(credit).ReturnChange(credit) + 
		sum product:Product.(credit>=price(product)) -> offer(product).serve(product).VM(credit-price(product))
	;
	
	% Creditwert muss gleich oder größer als gegebene Returnwert
	%Returnwert wird vom Credit abgezogen

	ReturnChange(credit : Int) =
%		sum coin:Coin.(credit >= value(coin)) -> return(coin).ReturnChange(credit - value(coin))
		(credit>=value(Euro)) -> return(Euro).ReturnChange(credit-value(Euro)) <>
			(credit>=value(_50c)) -> return(_50c).ReturnChange(credit-value(_50c)) <>
				(credit>=value(_20c)) -> return(_20c).ReturnChange(credit-value(_20c)) <>
					(credit>=value(_10c)) -> return(_10c).ReturnChange(credit-value(_10c)) <>
						(credit>=value(_5c)) -> return(_5c).ReturnChange(credit-value(_5c)) <> VM(credit)
	;

% Es wird mit dem Prozess VendingMachine begonnen

init
    	VendingMachine
;
